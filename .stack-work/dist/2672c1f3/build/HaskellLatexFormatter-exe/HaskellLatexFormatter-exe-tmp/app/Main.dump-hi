
==================== FINAL INTERFACE ====================
2016-07-30 03:01:24.7776033 UTC

interface main@main:Main 7103
  interface hash: 97cbff64a8a3e0021612d2310cd964a4
  ABI hash: cb6c4338a772a866de5aeb83fb474066
  export-list hash: 01a918d9db372ebaafe6704b4d848b84
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: e39fd44538d1fe1f8911dac17db8256e
  sig of: Nothing
  used TH splices: False
  where
exports:
  Main.main
module dependencies:
package dependencies: HaskellLatexFormatter-0.1.0.0@Haske_CCsxScH00Fh29Ph7qS09DD
                      base-4.8.2.0* ghc-prim-0.4.0.0 integer-gmp-1.0.0.0
                      mtl-2.2.1@mtl_Aue4leSeVkpKLsfHIV51E8
                      transformers-0.4.2.0@trans_GZTjP9K5WFq01xC9BAGQpF
orphans: base-4.8.2.0:GHC.Base base-4.8.2.0:GHC.Float
         transformers-0.4.2.0@trans_GZTjP9K5WFq01xC9BAGQpF:Control.Monad.Trans.Error
family instance modules: base-4.8.2.0:Control.Applicative
                         base-4.8.2.0:Data.Either base-4.8.2.0:Data.Functor.Identity
                         base-4.8.2.0:Data.Monoid base-4.8.2.0:Data.Type.Equality
                         base-4.8.2.0:GHC.Generics
import  -/  HaskellLatexFormatter-0.1.0.0@Haske_CCsxScH00Fh29Ph7qS09DD:LatexFormatter 1067c1435e3baf8cc476b847236356b0
import  -/  HaskellLatexFormatter-0.1.0.0@Haske_CCsxScH00Fh29Ph7qS09DD:Lib 4b084d1280c0e845cd54fa4ccffcd097
import  -/  base-4.8.2.0:Data.OldList d8fd80b0e14aa085ce6219cd89dad356
import  -/  base-4.8.2.0:Data.Traversable 7576318f4ef8587ad947f87012b65abf
import  -/  base-4.8.2.0:Data.Tuple 012ad951a59a9d85fe1de36a2f012986
import  -/  base-4.8.2.0:GHC.Base a4939789b2cfd60b36ed163e56a623cd
import  -/  base-4.8.2.0:GHC.IO.Handle 631f32e0ad65df940f6a2b3e721d8452
import  -/  base-4.8.2.0:GHC.IO.Handle.FD f260998705ecc3bf793b3d885cfc0751
import  -/  base-4.8.2.0:GHC.IO.Handle.Text 06d2dc7704bcfe88a2157fd04748ace5
import  -/  base-4.8.2.0:GHC.IO.IOMode 89fcaeb96929360e7be5a7bbb14ceec9
import  -/  base-4.8.2.0:Prelude 694dcaf039efe62df1c44834e2dbd2fb
import  -/  base-4.8.2.0:System.IO 638c10c4fd4901a0aca5b77c9f14123d
import  -/  ghc-prim-0.4.0.0:GHC.Types 6b27fb3fdbd0e3f0925a4496c66513bb
import  -/  mtl-2.2.1@mtl_Aue4leSeVkpKLsfHIV51E8:Control.Monad.State 3c8114545920fee1e57c3d7a07c2d0d7
import  -/  transformers-0.4.2.0@trans_GZTjP9K5WFq01xC9BAGQpF:Control.Monad.Trans.State.Lazy 442cc9f80155d8aaed5b22580b659d92
b219bd9a570b222e131f3198c0803f2f
  $wa ::
    [[GHC.Types.Char]]
    -> LatexFormatter.Indent
    -> (# [[LatexFormatter.Token]], LatexFormatter.Indent #)
  {- Arity: 2, Strictness: <S,1*U><L,U(U)>, Inline: [0] -}
4d136b0307591804dcd03a108c1037ee
  main :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                Main.main1 `cast` (Sym (GHC.Types.NTCo:IO[0] <()>_R)) -}
ead5a6a7277c6323cec883a4564b8f05
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ s :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case GHC.IO.Handle.FD.openFile1
                        Main.main11
                        GHC.IO.IOMode.ReadMode
                        s of ds1 { (#,#) ipv ipv1 ->
                 case GHC.IO.Handle.Text.hGetContents1
                        ipv1
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        Main.main10
                        GHC.Types.True
                        ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                 let {
                   mystringlist :: [GHC.Base.String] = Data.OldList.lines ipv3
                 } in
                 case Main.main9
                        (GHC.Base.map
                           @ [GHC.Types.Char]
                           @ (GHC.Types.IO ())
                           System.IO.putStrLn1
                             `cast`
                           (<GHC.Base.String>_R ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R))
                           mystringlist)
                        ipv4 of ds4 { (#,#) ipv6 ipv7 ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        Main.main8
                        GHC.Types.True
                        ipv6 of ds5 { (#,#) ipv8 ipv9 ->
                 case Main.$wa mystringlist Main.main7 of ww { (#,#) ww1 ww2 ->
                 case Main.main6
                        (GHC.Base.map
                           @ [LatexFormatter.Token]
                           @ (GHC.Types.IO ())
                           Main.main5
                             `cast`
                           (<[LatexFormatter.Token]>_R ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R))
                           ww1)
                        ipv8 of ds6 { (#,#) ipv10 ipv11 ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        Main.main4
                        GHC.Types.True
                        ipv10 of ds7 { (#,#) ipv12 ipv13 ->
                 case Main.main3
                        (GHC.Base.map
                           @ [LatexFormatter.Token]
                           @ (GHC.Types.IO ())
                           Main.main2
                             `cast`
                           (<[LatexFormatter.Token]>_R ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R))
                           ww1)
                        ipv12 of ds8 { (#,#) ipv14 ipv15 ->
                 case GHC.IO.Handle.hClose1 ipv1 ipv14 of ds9 { (#,#) ipv16 ipv17 ->
                 (# ipv16, GHC.Tuple.() #) } } } } } } } } } }) -}
d6d08d32bedeba41885b010d2052c1ab
  main10 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "\n\
                   \Input as a list of String:"#) -}
334f3f0c167b774fed04789a6dbf1cfc
  main11 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "example.tex"#) -}
51b7b1cf9646c7fc121beebc471bed61
  main12 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (GHC.TopHandler.runMainIO1
                   @ ()
                   Main.main1 `cast` (Sym (GHC.Types.NTCo:IO[0] <()>_R))) -}
b6c85951c7a15fe802e005dbb3e2c6da
  main2 ::
    [LatexFormatter.Token]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 2,
     Unfolding: (\ x :: [LatexFormatter.Token]
                   eta :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 GHC.IO.Handle.Text.hPutStr2
                   GHC.IO.Handle.FD.stdout
                   (LatexFormatter.convertTokenlist_go x)
                   GHC.Types.True
                   eta) -}
54f1d76a9b158359f95a9d26387e0e42
  main3 ::
    [GHC.Types.IO ()]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, [()] #)
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,U> -}
8837594c4c223f7542cfe88032e7d303
  main4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "\n\
                   \Output as a list of String:"#) -}
9327e9f7c16f3bc9beec53b63c2ca417
  main5 ::
    [LatexFormatter.Token]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 2,
     Unfolding: (\ x :: [LatexFormatter.Token]
                   eta :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 GHC.IO.Handle.Text.hPutStr2
                   GHC.IO.Handle.FD.stdout
                   (GHC.Show.$fShow[]_$s$cshow2 x)
                   GHC.Types.True
                   eta) -}
f0ddb8f0167d90f64559d0cd1129998f
  main6 ::
    [GHC.Types.IO ()]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, [()] #)
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,U> -}
ba1725b4891e87337b93fb08a106ba61
  main7 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 0) -}
85b9739bf816445948f0dacb715dd0dd
  main8 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "\n\
                   \As lists of Token after Indent processing:"#) -}
c1dd8676d963145c212d64033457a0f5
  main9 ::
    [GHC.Types.IO ()]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, [()] #)
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,U> -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

