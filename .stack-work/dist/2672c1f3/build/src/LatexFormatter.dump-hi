
==================== FINAL INTERFACE ====================
2016-07-27 23:10:44.8844017 UTC

interface Haske_CCsxScH00Fh29Ph7qS09DD:LatexFormatter 7103
  interface hash: d9d39310c3252b6e6a4e6f73ef00f681
  ABI hash: b0b063c40c77ff449b337c3e908a4bfc
  export-list hash: ad749f9793b68d53e13f1127983a0930
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 6fe5b62a773429de29d6bc64c829b518
  sig of: Nothing
  used TH splices: False
  where
exports:
  LatexFormatter.convertTokenlist
  LatexFormatter.processIndent
  LatexFormatter.tokenize
  LatexFormatter.Indent
module dependencies:
package dependencies: base-4.8.2.0* ghc-prim-0.4.0.0
                      integer-gmp-1.0.0.0 mtl-2.2.1@mtl_Aue4leSeVkpKLsfHIV51E8
                      transformers-0.4.2.0@trans_GZTjP9K5WFq01xC9BAGQpF
orphans: base-4.8.2.0:GHC.Base base-4.8.2.0:GHC.Float
         transformers-0.4.2.0@trans_GZTjP9K5WFq01xC9BAGQpF:Control.Monad.Trans.Error
family instance modules: base-4.8.2.0:Control.Applicative
                         base-4.8.2.0:Data.Either base-4.8.2.0:Data.Functor.Identity
                         base-4.8.2.0:Data.Monoid base-4.8.2.0:Data.Type.Equality
                         base-4.8.2.0:GHC.Generics
import  -/  base-4.8.2.0:Control.Monad 480c5067477275068c9b98be08410df9
import  -/  base-4.8.2.0:Data.Foldable 2ce969969ad5231eb40bd713f94f05ad
import  -/  base-4.8.2.0:GHC.Base a4939789b2cfd60b36ed163e56a623cd
import  -/  base-4.8.2.0:GHC.List 0c736920522bbd14b770342776012ab6
import  -/  base-4.8.2.0:GHC.Num 9f42750c866f5832ca565146bd660c60
import  -/  base-4.8.2.0:Prelude 694dcaf039efe62df1c44834e2dbd2fb
import  -/  ghc-prim-0.4.0.0:GHC.Classes e1f4ff80f7b5262008a595d29986fb18
import  -/  mtl-2.2.1@mtl_Aue4leSeVkpKLsfHIV51E8:Control.Monad.State 3c8114545920fee1e57c3d7a07c2d0d7
import  -/  mtl-2.2.1@mtl_Aue4leSeVkpKLsfHIV51E8:Control.Monad.State.Class 521f2360d2f7cec1d4be0e199fde9ee2
import  -/  mtl-2.2.1@mtl_Aue4leSeVkpKLsfHIV51E8:Control.Monad.Writer cf71944512d0bdc490a44e3d3b7f624e
import  -/  transformers-0.4.2.0@trans_GZTjP9K5WFq01xC9BAGQpF:Control.Monad.Trans.State.Lazy 442cc9f80155d8aaed5b22580b659d92
a7c7a5f6be9539df58560d10c784b7fb
  $wa ::
    [[LatexFormatter.Token]]
    -> [[LatexFormatter.Token]]
    -> LatexFormatter.Indent
    -> (# [[LatexFormatter.Token]], LatexFormatter.Indent #)
  {- Arity: 3, Strictness: <S,1*U><L,U><L,U(U)>, Inline: [0] -}
ada4a8029a4f32318f80668ad7bd9672
  type Indent = GHC.Types.Int
ca15e66755448b14304bea0d4e272970
  type Token = GHC.Base.String
657ec0d7d19d02aa8f364565ecda349c
  convertTokenlist :: [LatexFormatter.Token] -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ x :: [LatexFormatter.Token] ->
                 LatexFormatter.convertTokenlist_go x) -}
c504d1db9062859e985edad1c0d9bfb9
  convertTokenlist_go :: [LatexFormatter.Token] -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U> -}
9060db427da3534deebddaa8016204e3
  processIndent ::
    [[LatexFormatter.Token]]
    -> Control.Monad.Trans.State.Lazy.State
         LatexFormatter.Indent [[LatexFormatter.Token]]
  {- Arity: 2, Strictness: <S,1*U><L,U(U)>m,
     Unfolding: InlineRule (0, True, True)
                LatexFormatter.processIndent1
                  `cast`
                (<[[LatexFormatter.Token]]>_R
                 ->_R Sym (Control.Monad.Trans.State.Lazy.NTCo:StateT[0]
                               <LatexFormatter.Indent>_N
                               <Data.Functor.Identity.Identity>_R
                               <[[LatexFormatter.Token]]>_N)) -}
525726f33f66765d588c141fdb700137
  processIndent1 ::
    [[LatexFormatter.Token]]
    -> LatexFormatter.Indent
    -> Data.Functor.Identity.Identity
         ([[LatexFormatter.Token]], LatexFormatter.Indent)
  {- Arity: 2, Strictness: <S,1*U><L,U(U)>m, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: [[LatexFormatter.Token]] w1 :: LatexFormatter.Indent ->
                 case w of wild {
                   []
                   -> (GHC.Types.[] @ [LatexFormatter.Token], w1)
                        `cast`
                      (Sym (Data.Functor.Identity.NTCo:Identity[0]
                                <([[LatexFormatter.Token]], LatexFormatter.Indent)>_R))
                   : ipv ipv1
                   -> let {
                        a9 :: Data.Functor.Identity.Identity
                                ([[LatexFormatter.Token]], GHC.Types.Int)
                        = case LatexFormatter.$wa
                                 wild
                                 (GHC.Types.[] @ [LatexFormatter.Token])
                                 w1 of ww { (#,#) ww1 ww2 ->
                          (ww1, ww2)
                            `cast`
                          (Sym (Data.Functor.Identity.NTCo:Identity[0]
                                    <([[LatexFormatter.Token]], LatexFormatter.Indent)>_R)) }
                      } in
                      (case a9
                              `cast`
                            (Data.Functor.Identity.NTCo:Identity[0]
                                 <([[LatexFormatter.Token]],
                                   GHC.Types.Int)>_R) of wild1 { (,) a10 s' ->
                       GHC.List.reverse1
                         @ [LatexFormatter.Token]
                         a10
                         (GHC.Types.[] @ [LatexFormatter.Token]) },
                       case a9
                              `cast`
                            (Data.Functor.Identity.NTCo:Identity[0]
                                 <([[LatexFormatter.Token]],
                                   GHC.Types.Int)>_R) of wild1 { (,) a10 s' ->
                       s' })
                        `cast`
                      (Sym (Data.Functor.Identity.NTCo:Identity[0]
                                <([[LatexFormatter.Token]], LatexFormatter.Indent)>_R)) }) -}
8c57391b0b57386e11c46e27b392fe9c
  tokenize :: GHC.Base.String -> [LatexFormatter.Token]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: (\ ds :: [GHC.Types.Char] ->
                 case ds of wild {
                   [] -> GHC.Types.[] @ LatexFormatter.Token
                   : ipv ipv1
                   -> GHC.List.filter
                        @ [GHC.Types.Char]
                        LatexFormatter.tokenize1
                        (GHC.List.reverse1
                           @ LatexFormatter.Token
                           (GHC.Base.map
                              @ [GHC.Types.Char]
                              @ [GHC.Types.Char]
                              (GHC.List.reverse @ GHC.Types.Char)
                              (LatexFormatter.tokenize_go
                                 wild
                                 (GHC.Types.[] @ [GHC.Types.Char])))
                           (GHC.Types.[] @ LatexFormatter.Token)) }) -}
6292ab483e1ac1c2ee010eb67962432b
  tokenize1 :: LatexFormatter.Token -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: LatexFormatter.Token ->
                 case GHC.Classes.$fEq[]_$s$c==1
                        ds
                        (GHC.Types.[] @ GHC.Types.Char) of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
c176674d2af8ac95e3216934d052e96c
  tokenize_go ::
    [GHC.Types.Char] -> [[GHC.Types.Char]] -> [[GHC.Types.Char]]
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U> -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

